{"version":3,"file":"static/js/113.bb30e62f.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","../node_modules/react-editext/src/utils.ts","../node_modules/react-editext/node_modules/style-inject/dist/style-inject.es.js","../node_modules/react-editext/src/index.tsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 320px;\n  display: flex;\n  /* flex-wrap: wrap; */\n  flex-direction: column;\n  padding: 10px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 20px;\n  border-radius: 5px;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-wrap: wrap;\n  margin-bottom: 30px;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.5;\n`;\n\nexport const SearchInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 16px;\n  border: none;\n  outline: none;\n  padding: 5px;\n  box-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2);\n`;\n\nexport const FormButton = styled.button`\n  width: 140px;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  margin-top: 5px;\n  margin-left: auto;\n  margin-right: auto;\n  font-weight: 400;\n  font-size: 18px;\n  line-height: 1.5;\n  color: #fff;\n  background-color: #034f84;\n  border: none;\n  border-radius: 5px;\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n  cursor: pointer;\n  transition: all cubic-bezier(0.4, 0, 0.2, 1) 250ms;\n\n  &:hover {\n    font-weight: 700;\n    background-color: #F2552C;\n  }\n`;\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function () {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getLoading = state => state.contacts.loading;\nexport const getError = state => state.contacts.error;\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    const fileredContacts = contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter));\n    const sortedContacts = [...fileredContacts].sort((a, b) =>\n      a.name.localeCompare(b.name));\n    return sortedContacts;\n  },\n);\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { toast } from 'react-toastify';\nimport { MdPerson, MdPhone } from 'react-icons/md';\nimport { Form, FormLabel, SearchInput, FormButton } from './ContactForm.styled';\nimport { getContacts } from 'redux/contacts/contacts-selectors';\nimport { addContact } from 'redux/contacts/contacts-operations';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (name === '' || number === '') {\n      return toast.warn('Please, fill in all fields!');\n    }\n\n    const existingContacts = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (existingContacts) {\n      toast.warn(`\"${name}\" is already in contacts!`);\n      resetForm();\n      return;\n    }\n\n    const item = {\n      name,\n      number,\n    };\n\n    dispatch(addContact(item));\n    toast.success(`\"${name}\" added to contacts!`);  \n    resetForm();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <FormLabel>\n        <MdPerson style={{ width: 23, height: 23, marginRight: '5px' }} />\n        Name        \n        <SearchInput\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          autoComplete=\"off\"\n          autoFocus\n        />\n      </FormLabel>\n      <FormLabel>\n        <MdPhone style={{ width: 23, height: 23, marginRight: '5px' }} />  \n        Phone number        \n        <SearchInput\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          autoComplete=\"off\"\n        />\n      </FormLabel>\n      <FormButton type=\"submit\">Add contact</FormButton>\n    </Form>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  flex-wrap: wrap;\n  width: 300px;\n  text-align: center;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 30px;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.5;\n`;\n\nexport const SearchInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 16px;\n  border: none;\n  outline: none;\n  padding: 5px;\n  box-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2);\n`;\n","import { useSelector, useDispatch } from \"react-redux\";\nimport { MdPerson } from 'react-icons/md';\nimport { FilterLabel, SearchInput } from './Filter.styled';\nimport { getFilter } from \"redux/contacts/contacts-selectors\";\nimport { filterContact } from 'redux/contacts/contacts-actions';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const onChange = event => dispatch(filterContact(event.target.value));\n\n  return (\n    <FilterLabel>\n      <MdPerson style={{ width: 23, height: 23, marginRight: '5px' }} />\n      Find contact by name\n      <SearchInput\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={onChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        autoComplete=\"off\"\n      />\n    </FilterLabel>\n  );\n};\n","export function classnames(...args: any[]) {\n  /**\n   * Our simple classnames replica.\n   * This is enough for me.\n   */\n  return Array(...args)\n    .filter((a) => a)\n    .join(' ');\n}\n\nexport const dataAttributes = {\n  /**\n   * This is for the end user. You can use below attributes if you want to\n   * style this component with `styled-components` or something like that.\n   * Example notation:\n   * <div class=\"EdiText_Buttons__container_34fgAsdf\" editext=\"button-container\">\n   * Example usage with styled-components:\n\n    const StyledEdiText = styled(EdiText)`\n      button[editext=\"edit-button\"] {\n        color: #000;\n      }\n      button[editext=\"save-button\"] {\n        background:#587C0C;\n        color: #fff;\n      }\n      input, textarea {\n        background: #1D2225;\n        color: #F4C361;\n        font-weight: bold;\n      }\n    `\n   */\n  mainContainer: 'main-container',\n  viewContainer: 'view-container',\n  buttonContainer: 'button-container',\n  editContainer: 'edit-container',\n  editButton: 'edit-button',\n  saveButton: 'save-button',\n  cancelButton: 'cancel-button',\n  input: 'input',\n  hint: 'hint',\n};\n\nexport const cancelOnConflictMessage =\n  'EdiText: Both `cancelOnUnfocus` and `submitOnUnfocus` are set to true. ' +\n  '`submitOnUnfocus` is ignored in this case. Please remove one of these.';\n\nexport const defaultValidationMessage = 'Invalid Value';\n\nexport function getCanEdit(\n  canEdit: boolean | (() => boolean) | undefined\n): boolean {\n  if (canEdit === undefined) {\n    return true;\n  }\n  return typeof canEdit === 'function' ? canEdit() : canEdit;\n}\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","/* eslint-disable react/prop-types */\nimport React, {\n  useEffect,\n  KeyboardEvent,\n  FocusEvent,\n  useState,\n  ChangeEvent,\n} from 'react';\nimport styles from './styles.module.css';\nimport {\n  cancelOnConflictMessage,\n  dataAttributes,\n  classnames,\n  defaultValidationMessage,\n  getCanEdit,\n} from './utils';\n\nexport type EdiTextType =\n  | 'text'\n  | 'textarea'\n  | 'email'\n  | 'number'\n  | 'date'\n  | 'datetime-local'\n  | 'time'\n  | 'month'\n  | 'url'\n  | 'week'\n  | 'tel';\n\nexport type ButtonsAlignment = 'after' | 'before';\n\nexport type InputProps =\n  | React.DetailedHTMLProps<\n      React.InputHTMLAttributes<HTMLInputElement>,\n      HTMLInputElement\n    >\n  | React.DetailedHTMLProps<\n      React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n      HTMLTextAreaElement\n    >;\nexport interface EdiTextProps {\n  /**\n   * Props to be passed to input element.\n   * Any kind of valid DOM attributes are welcome\n   */\n  inputProps?: InputProps;\n  /**\n   * Props to be passed to div element that shows the text.\n   * You can specify your own `styles` or `className`\n   */\n  viewProps?: React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  >;\n  /**\n   * Props to be passed to edit button.\n   * You can set `styles`, `className or disabled state.\n   */\n  editButtonProps?: React.DetailedHTMLProps<\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  >;\n  /**\n   * Class name for the root container of the EdiText.\n   */\n  className?: string;\n  /**\n   * Props to be passed to div element that is container for all elements.\n   * You can use this if you want to style or select the whole container.\n   */\n  containerProps?: React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  >;\n  /**\n   * Value of the content [in view mode] and input [in edit mode]\n   */\n  value: string;\n  /**\n   * A simple hint message appears at the bottom of input element.\n   * Any valid element is allowed.\n   */\n  hint?: React.ReactNode;\n  /**\n   * If validation fails this message will appear\n   */\n  validationMessage?: any;\n  /** Pass your own validation function.\n   * takes one param -> `value`.\n   * It must return `true` or `false`\n   */\n  validation?: (...args: string[]) => boolean;\n  /**\n   * will be called when validation fails.\n   * takes one param <value> which is the current value of input\n   */\n  onValidationFail?: (...args: string[]) => any;\n  /**\n   * Input type. Possible options are:\n   * `text`, `number`, `email`, `textarea`, `date`,\n   * `datetime-local`, `time`, `month`, `url`, `week`, `tel`\n   * @default \"text\"\n   */\n  type?: EdiTextType;\n  /**\n   * will be called when user clicked cancel button\n   * @param value the current value of input when cancelled.\n   * @param inputProps inputProps that passed to the element.\n   */\n  onCancel?: (value: any, inputProps?: InputProps) => any;\n  /**\n   * will be called when user clicked save button.\n   * @param value the current value of input\n   * @param inputProps inputProps that passed to the element.\n   */\n  onSave: (value: any, inputProps?: InputProps) => any;\n  /**\n   * Custom class name for SAVE button.\n   * */\n  saveButtonClassName?: string;\n  /**\n   * Custom class name for EDIT button.\n   * */\n  editButtonClassName?: string;\n  /**\n   * Custom class name for CANCEL button. */\n  cancelButtonClassName?: string;\n  /**\n   * Content for CANCEL button. Any valid element and node are allowed. */\n  cancelButtonContent?: any;\n  /**\n   * Content for SAVE button. Any valid element and node are allowed. */\n  saveButtonContent?: any;\n  /**\n   * Content for EDIT button. Any valid element and node are allowed. */\n  editButtonContent?: any;\n  /**\n   * Set it to `true` if you don't want to see default icons\n   * on action buttons.See Examples page for more details.\n   * @default \"false\"\n   */\n  hideIcons?: boolean;\n  /**\n   * Decides whether buttons will be located _BEFORE_ or _AFTER_\n   * the input element.\n   * @default \"after\"\n   */\n  buttonsAlign?: ButtonsAlignment;\n  /**\n   * Custom class name for the container in view mode.\n   */\n  viewContainerClassName?: string;\n  /**\n   * Custom class name for the container in edit mode.\n   * Will be set to viewContainerClassName if you set it and omit this.\n   */\n  editContainerClassName?: string;\n  /**\n   * Custom class name for the top-level main container.\n   * @deprecated please use `containerProps` instead of this\n   */\n  mainContainerClassName?: string;\n  /**\n   * Set it to `true` if you want clicking on the view to activate the editor.\n   * @default false\n   */\n  editOnViewClick?: boolean;\n  /**\n   * Set it to `true` if you want the view state to be edit mode\n   * @default false\n   */\n  editing?: boolean;\n  /**\n   * control function that will be called when user clicks on the edit button.\n   * return false to prevent editing or return true to allow editing.\n   */\n  canEdit?: boolean | (() => boolean);\n  /**\n   * Will be called when the editing mode is active.\n   *\n   * @param value the value of the input at the time when editing started.\n   * @param inputProps inputProps that passed to the element.\n   */\n  onEditingStart?: (value: any, inputProps?: InputProps) => any;\n  /**\n   * Set it to `true` if you want to display action buttons **only**\n   * when the text hovered by the user.\n   * @default false\n   */\n  showButtonsOnHover?: boolean;\n  /**\n   * Set it to `true` if you want to submit the form when `Enter`\n   * is pressed.\n   * @default false\n   */\n  submitOnEnter?: boolean;\n  /**\n   * Set it to `true` if you want to cancel the form when `Escape`\n   * is pressed.\n   * @default false\n   */\n  cancelOnEscape?: boolean;\n  /**\n   * Set it to `true` if you want to cancel the form when the input\n   * is unfocused.\n   * @default false\n   */\n  cancelOnUnfocus?: boolean;\n  /**\n   * Set it to `true` if you want to save the form when the input\n   * is unfocused.\n   * @default false\n   */\n  submitOnUnfocus?: boolean;\n  /**\n   * An helper shortcut in case you want to pass the same tabIndex to both\n   * `viewProps` and `inputProps`.\n   *\n   * NOTE: This will be overriden if you pass the tabIndex in `viewProps`\n   * or `inputProps`.\n   */\n  tabIndex?: number;\n  /**\n   * Activates the edit mode when the view container is in focus.\n   */\n  startEditingOnFocus?: boolean;\n  /**\n   * Activates the edit mode when the `Enter` key is pressed if the view\n   * container is focused.\n   *\n   * NOTE: This requires the element to be in focus.\n   */\n  startEditingOnEnter?: boolean;\n  /**\n   * Custom render method for the content in the view mode.\n   * Use this prop to customize the displayed value in view mode.\n   * The return value from this function will be rendered in view mode.\n   * You can return string or JSX. Both are allowed.\n   */\n  renderValue?: (value: any) => any;\n}\n\nfunction EdiText(props: EdiTextProps) {\n  // state\n  const [editingInternal, setEditingInternal] = useState(props.editing);\n  const [valid, setValid] = useState<boolean>(true);\n  const [valueInternal, setValueInternal] = useState<string>(props.value || '');\n  const [savedValue, setSavedValue] = useState<string | undefined>(undefined);\n  const [viewFocused, setViewFocused] = useState<boolean>(false);\n  // refs\n  const saveButton = React.createRef<HTMLButtonElement>();\n  const editingContainer = React.createRef<HTMLDivElement>();\n  const editingButtons = React.createRef<any>();\n\n  useEffect(() => {\n    if (props.cancelOnUnfocus && props.submitOnUnfocus) {\n      console.warn(cancelOnConflictMessage);\n    }\n  }, [props.cancelOnUnfocus, props.submitOnUnfocus]);\n\n  useEffect(() => {\n    if (props.value !== undefined) {\n      setValueInternal(props.value);\n      setSavedValue(props.value);\n    }\n\n    if (props.editing !== undefined) {\n      setEditingInternal(props.editing);\n    }\n  }, [props.editing, props.value]);\n\n  function handleKeyDown(e: KeyboardEvent<any>): void {\n    const isEnter = [13, 'Enter'].some((c) => e.key === c || e.code === c);\n    const isEscape = [27, 'Escape', 'Esc'].some(\n      (c) => e.code === c || e.key === c\n    );\n    if (isEnter) {\n      props.submitOnEnter && handleSave();\n      e?.preventDefault();\n    }\n    if (isEscape) {\n      props.cancelOnEscape && handleCancel();\n      e.preventDefault();\n    }\n    props.inputProps?.onKeyDown && props.inputProps.onKeyDown(e);\n  }\n\n  function handleOnBlur(e: FocusEvent<any>): void {\n    const isEditingButton = editingButtons.current?.contains(e?.relatedTarget);\n    props.cancelOnUnfocus && !isEditingButton && handleCancel();\n    props.submitOnUnfocus &&\n      !isEditingButton &&\n      !props.cancelOnUnfocus &&\n      handleSave();\n    props.inputProps?.onBlur && props.inputProps.onBlur(e);\n  }\n\n  function handleViewFocus(e: FocusEvent<HTMLDivElement>): void {\n    setViewFocused(true);\n    props.startEditingOnFocus && setEditingInternal(true);\n    props.viewProps?.onFocus && props.viewProps.onFocus(e);\n  }\n\n  function handleKeyDownForView(e: KeyboardEvent<any>): void {\n    const isEnter = [13, 'Enter'].some((c) => e.key === c || e.code === c);\n    const startEditing = isEnter && viewFocused && props.startEditingOnEnter;\n    startEditing && e.preventDefault();\n    startEditing && setEditingInternal(true);\n    props.viewProps?.onKeyDown && props.viewProps.onKeyDown(e);\n  }\n\n  function handleInputChange(\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void {\n    setValid(true);\n    setValueInternal(e.target.value);\n    props.inputProps?.onChange?.(e as any);\n  }\n\n  function handleCancel(): void {\n    const val = savedValue ?? props.value;\n    setValid(true);\n    setEditingInternal(false);\n    setValueInternal(val);\n    props.onCancel?.(val, props.inputProps);\n  }\n\n  function handleActivateEditMode(): void {\n    if (getCanEdit(props.canEdit)) {\n      setEditingInternal(true);\n      props.onEditingStart?.(valueInternal, props.inputProps);\n    }\n  }\n\n  function handleSave(): void {\n    if (typeof props.validation === 'function') {\n      const isValid = props.validation(valueInternal);\n      if (!isValid) {\n        setValid(false);\n        props.onValidationFail && props.onValidationFail(valueInternal);\n        return;\n      }\n    }\n    setEditingInternal(false);\n    setSavedValue(valueInternal);\n    props.onSave(valueInternal, props.inputProps);\n  }\n\n  function _renderInput() {\n    if (props.type === 'textarea') {\n      return (\n        <textarea\n          className={styles.Editext__input}\n          // @ts-ignore\n          editext={dataAttributes.input}\n          // this is here because,\n          // we still allow people to pass the tabIndex via inputProps\n          // also backward compatibility.\n          tabIndex={props.tabIndex}\n          {...(props.inputProps as React.DetailedHTMLProps<\n            React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n            HTMLTextAreaElement\n          >)}\n          onBlur={handleOnBlur}\n          value={valueInternal}\n          onChange={handleInputChange}\n          autoFocus={editingInternal}\n        />\n      );\n    } else {\n      return (\n        <input\n          className={styles.Editext__input}\n          // @ts-ignore\n          editext={dataAttributes.input}\n          // this is here because,\n          // we still allow people to pass the tabIndex via inputProps\n          // also backward compatibility.\n          tabIndex={props.tabIndex}\n          {...props.inputProps}\n          onKeyDown={handleKeyDown}\n          onBlur={handleOnBlur}\n          value={valueInternal}\n          type={props.type || 'text'}\n          onChange={handleInputChange}\n          autoFocus={editingInternal}\n        />\n      );\n    }\n  }\n\n  function _renderEditingMode() {\n    const inputElem = _renderInput();\n    // calculate save button classes\n    const saveButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__save_button}`,\n      props.hideIcons && `${styles.Editext__hide_default_icons}`\n    );\n    const saveButtonClass =\n      props.saveButtonClassName || saveButtonDefaultClasses;\n    // calculate cancel button classes\n    const cancelButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__cancel_button}`,\n      props.hideIcons && `${styles.Editext__hide_default_icons}`\n    );\n    const cancelButtonClass =\n      props.cancelButtonClassName || cancelButtonDefaultClasses;\n    let editContainerClass = styles.Editext__editing_container;\n    if (props.editContainerClassName)\n      editContainerClass = props.editContainerClassName;\n    if (props.viewContainerClassName)\n      editContainerClass = props.viewContainerClassName;\n\n    const alignment = props.buttonsAlign || 'after';\n    const buttonsContainerClass = classnames(\n      styles.Editext__buttons_container,\n      alignment === 'before' && `${styles.Editext__buttons_before_aligned}`,\n      alignment === 'after' && `${styles.Editext__buttons_after_aligned}`\n    );\n    return (\n      <div>\n        <div\n          ref={editingContainer}\n          className={editContainerClass}\n          // @ts-ignore\n          editext={dataAttributes.editContainer}\n        >\n          {alignment === 'after' && inputElem}\n          <div className={buttonsContainerClass} ref={editingButtons}>\n            <button\n              ref={saveButton}\n              // @ts-ignore\n              editext={dataAttributes.saveButton}\n              type=\"button\"\n              className={saveButtonClass}\n              onClick={handleSave}\n            >\n              {props.saveButtonContent}\n            </button>\n            <button\n              type=\"button\"\n              // @ts-ignore\n              editext={dataAttributes.cancelButton}\n              className={cancelButtonClass}\n              onClick={handleCancel}\n            >\n              {props.cancelButtonContent}\n            </button>\n          </div>\n          {alignment === 'before' && inputElem}\n        </div>\n        {!valid && !props.onValidationFail && (\n          <div className={styles.Editext__validation_message}>\n            {props.validationMessage || defaultValidationMessage}\n          </div>\n        )}\n        {props.hint && (\n          <div\n            className={styles.Editext__hint}\n            // @ts-ignore\n            editext={dataAttributes.hint}\n          >\n            {props.hint}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  function _renderViewMode() {\n    // calculate edit button classes\n    const editButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__edit_button}`,\n      props.hideIcons && `${styles.Editext__hide_default_icons}`\n    );\n    const editButtonClass =\n      props.editButtonClassName || editButtonDefaultClasses;\n    const viewContainerClass = classnames(\n      props.viewContainerClassName || styles.Editext__view_container,\n      props.showButtonsOnHover &&\n        `${styles.Editext__buttons_showButtonsOnHover}`\n    );\n    const alignment = props.buttonsAlign || 'after';\n    const buttonsContainerClass = classnames(\n      styles.Editext__buttons_container,\n      alignment === 'before' && `${styles.Editext__buttons_before_aligned}`,\n      alignment === 'after' && `${styles.Editext__buttons_after_aligned}`\n    );\n    const viewClickHandler = props.editOnViewClick\n      ? handleActivateEditMode\n      : undefined;\n    const _value =\n      typeof props.renderValue === 'function'\n        ? props.renderValue(valueInternal)\n        : valueInternal;\n    return (\n      <div\n        className={viewContainerClass}\n        // @ts-ignore\n        editext={dataAttributes.viewContainer}\n      >\n        {alignment === 'after' && (\n          <div\n            // this is here because,\n            // we still allow people to pass the tabIndex via inputProps\n            // also backward compatibility.\n            tabIndex={props.tabIndex}\n            {...props.viewProps}\n            onKeyDown={handleKeyDownForView}\n            onFocus={handleViewFocus}\n            onClick={viewClickHandler}\n            // @ts-ignore\n            editext=\"view\"\n          >\n            {_value}\n          </div>\n        )}\n        <div className={buttonsContainerClass}>\n          <button\n            type=\"button\"\n            className={editButtonClass}\n            {...props.editButtonProps}\n            // @ts-ignore\n            editext={dataAttributes.editButton}\n            onClick={handleActivateEditMode}\n          >\n            {props.editButtonContent}\n          </button>\n        </div>\n        {alignment === 'before' && (\n          <div\n            // this is here because,\n            // we still allow people to pass the tabIndex via inputProps\n            // also backward compatibility.\n            tabIndex={props.tabIndex}\n            {...props.viewProps}\n            onKeyDown={handleKeyDownForView}\n            onFocus={handleViewFocus}\n            onClick={viewClickHandler}\n            // @ts-ignore\n            editext={dataAttributes.viewContainer}\n          >\n            {_value}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  const mode = editingInternal ? _renderEditingMode() : _renderViewMode();\n  const clsName = classnames(\n    props.containerProps?.className ||\n      props.mainContainerClassName ||\n      styles.Editext__main_container,\n    props.className\n  );\n  return (\n    <div\n      {...props.containerProps}\n      className={clsName}\n      // @ts-ignore\n      editext={dataAttributes.mainContainer}\n    >\n      {mode}\n    </div>\n  );\n}\n\nexport default EdiText;\n","import styled from 'styled-components';\nimport EdiText from 'react-editext';\n\nexport const ContactSetUnit = styled.li`\n  position: relative;\n  display: flex;\n  align-items: center;\n  color: #034f84;\n  transition: all cubic-bezier(0.4, 0, 0.2, 1) 250ms;\n\n  &:hover {    \n    color: #F2552C;\n  }\n\n  &:not(:last-child) {\n    margin-bottom: 5px;\n    border-bottom: 1px dashed rgba(128, 128, 128, 0.3);\n  }\n`;\n\nexport const ContactInfo = styled.div`\n  font-style: italic;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.5;\n`;\n\nexport const DeleteButton = styled.button`\n  position: absolute;\n  right: 10px;\n  display: flex;\n  justify-content: center;\n  alight-items: center;\n  padding: 0;\n  color: #fff;\n  background-color: #034f84;\n  border: none;\n  border-radius: 50%;\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n  cursor: pointer;\n  transition: all cubic-bezier(0.4, 0, 0.2, 1) 250ms;\n\n  &:hover {\n    font-weight: 700;\n    background-color: #F2552C;\n    transform: scale(1.1);\n  }\n`;\n\nexport const StyledEdiText = styled(EdiText)`\n\n  button {\n    padding-top: 2px;\n    padding-bottom: 2px;\n    border-radius: 5px;\n    border: none; \n    background-color: #fff;\n    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);   \n  }\n\n  button[editext=\"save-button\"] {\n    transition: all cubic-bezier(0.4, 0, 0.2, 1) 250ms;\n\n    &:hover {\n      background-color: greenyellow;\n    }\n  }\n\n  button[editext=\"cancel-button\"] {\n    transition: all cubic-bezier(0.4, 0, 0.2, 1) 250ms;\n\n    &:hover {\n      color: #fff;\n      background-color: crimson;\n    }\n  }\n  input, textarea {\n    padding-top: 1px;\n    padding-bottom: 1px;\n    line-height: 1.3;\n    border-radius: 5px;\n    border: none;\n    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n\n    &:not(:last-child) {\n      margin-bottom: 1px;\n    }\n  }\n}\n`\n\nexport const StyledEdiTextName = styled(StyledEdiText)`\n  font-weight: 700;\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from \"react-redux\";\nimport { toast } from 'react-toastify';\nimport { MdClose, MdContactPhone } from 'react-icons/md';\nimport {\n  ContactSetUnit,\n  ContactInfo,\n  DeleteButton,\n  StyledEdiText,\n  StyledEdiTextName,\n} from './ContactListItem.styled';\nimport {\n  deleteContact,\n  changeContactName,\n  changeContactNumber,\n} from \"redux/contacts/contacts-operations\";\n\nexport const ContactListItem = ({\n  contact: { id, name, number },\n}) => {\n  const [nameValue, setNameValue] = useState(name);\n  const [numberValue, setNumberValue] = useState(number);\n  const dispatch = useDispatch();\n\n  const handleSaveName = id => value => {\n    if (value === name) return;\n    setNameValue(value);\n    dispatch(changeContactName({ id, value }));\n  };\n\n  const handleSaveNumber = id => value => {\n    if (value === number) return;\n    setNumberValue(value);\n    dispatch(changeContactNumber({ id, value }));\n  };\n\n  const onDeleteContact = id => {\n    dispatch(deleteContact(id));\n    toast.info(`\"${name}\" deleted from contacts!`);  \n  };\n\n  const validateName = value => {\n    const pattern =\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n    return value.trim() !== '' && pattern.test(value);\n  };\n\n  const validateNumber = value => {\n    const pattern =\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n    return value.trim() !== '' && pattern.test(value);\n  };\n\n  const validateNameFailed = () => toast.info('Name may contain only letters, apostrophe, dash and spaces');\n  const validateNumberFailed = () => toast.info('Phone number must be digits and can contain spaces, dashes, parentheses and can start with +');\n\n  return (\n    <ContactSetUnit>\n      <MdContactPhone style={{ width: 48, height: 48, marginRight: '10px' }} />\n      <ContactInfo>\n        <StyledEdiTextName\n          type=\"text\"\n          value={nameValue}\n          onSave={handleSaveName(id)}\n          showButtonsOnHover\n          cancelOnUnfocus\n          submitOnEnter\n          cancelOnEscape\n          validation={validateName}\n          onValidationFail={validateNameFailed}\n        />\n        <StyledEdiText\n          type=\"tel\"\n          value={numberValue}\n          onSave={handleSaveNumber(id)}\n          showButtonsOnHover\n          cancelOnUnfocus\n          submitOnEnter\n          cancelOnEscape\n          validation={validateNumber}\n          onValidationFail={validateNumberFailed}\n        />\n      </ContactInfo>\n      <DeleteButton type=\"button\" onClick={() => onDeleteContact(id)}>\n        <MdClose style={{ width: 40, height: 40 }} />\n      </DeleteButton>\n    </ContactSetUnit>\n  );\n}\n\nContactListItem.propTypes = {\n  contact: PropTypes.objectOf(PropTypes.string.isRequired),\n};\n","import styled from 'styled-components';\n\nexport const ContactSet = styled.ul`\n  max-width: 460px;\n  max-height: 332px;\n  padding: 10px;\n  margin-left: auto;\n  margin-right: auto;  \n  margin-bottom: 20px;\n  overflow: auto;\n  background-color: #faf9dd;\n  border-radius: 5px;\n  box-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2);\n\n  &:hover {\n    -webkit-overflow-scrolling: touch;\n\t  -moz-overflow-scrolling: touch;\n\t  -ms-overflow-scrolling: touch;\n\t  -o-overflow-scrolling: touch;\n\t  overflow-scrolling: touch;\n  }\n\n  &::-webkit-scrollbar {\n\t  -webkit-appearance: none;\n\t  width: 5px;\n  }\n\n  &::-webkit-scrollbar-thumb {    \n\t  border-radius: 2px;\n\t  background-color: rgba(128, 128, 128, 0.5);\n\t  -webkit-box-shadow: 0 0 1px rgba(255,255,255,0.5);\n  }\n`;\n\nexport const ContactsError = styled.p`\n  text-align: center;\n`;\n","import { useSelector } from \"react-redux\";\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { ContactSet, ContactsError } from './ContactList.styled';\nimport { getVisibleContacts } from \"redux/contacts/contacts-selectors\";\n\nexport const ContactList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  \n  return (\n    contacts.length !== 0\n      ? (\n        <ContactSet>          \n          {contacts.map(contact => (\n            <ContactListItem\n              key={contact.id}\n              contact={contact}\n            />\n          ))}           \n        </ContactSet >       \n      )\n      : <ContactsError>There's no information</ContactsError> \n  );\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { toast } from 'react-toastify';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader/Loader';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Title } from 'components/App/App.styled';\nimport { getContacts, getLoading, getError } from 'redux/contacts/contacts-selectors';\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\n\nexport const ContactsPage = () => {\n  const contacts = useSelector(getContacts);\n  const loading = useSelector(getLoading);\n  const error = useSelector(getError);  \n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  if (error) {\n    return toast.error('Oops!...Something went wrong');\n  }\n\n  const isContacts = contacts.length !== 0;\n\n  return (\n    <main>\n      <Title>Contacts</Title>\n      <ContactForm />\n      {isContacts &&\n        <>\n          {loading ? <Loader /> : <Filter />}\n          <ContactList />\n        </>\n      }\n    </main>    \n  );\n};\n"],"names":["Form","styled","FormLabel","SearchInput","FormButton","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","getContacts","state","contacts","items","getFilter","filter","getLoading","loading","getError","error","getVisibleContacts","normalizedFilter","toLowerCase","fileredContacts","includes","sortedContacts","sort","localeCompare","ContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","handleChange","event","target","resetForm","onSubmit","preventDefault","toast","contact","item","addContact","style","width","height","marginRight","type","onChange","pattern","title","autoComplete","autoFocus","FilterLabel","Filter","filterContact","classnames","args","css","ref","insertAt","document","head","getElementsByTagName","createElement","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","dataAttributes","mode","props","_b","editing","editingInternal","setEditingInternal","_c","valid","setValid","_d","valueInternal","setValueInternal","_e","savedValue","setSavedValue","_f","viewFocused","setViewFocused","saveButton","React","editingContainer","editingButtons","handleKeyDown","e","isEnter","some","c","code","isEscape","submitOnEnter","handleSave","cancelOnEscape","handleCancel","inputProps","onKeyDown","handleOnBlur","isEditingButton","current","contains","relatedTarget","cancelOnUnfocus","submitOnUnfocus","onBlur","handleViewFocus","startEditingOnFocus","t","viewProps","onFocus","handleKeyDownForView","startEditing","startEditingOnEnter","handleInputChange","val","onCancel","handleActivateEditMode","canEdit","onEditingStart","validation","onValidationFail","onSave","useEffect","console","warn","editButtonDefaultClasses","editButtonClass","viewContainerClass","alignment","buttonsContainerClass","viewClickHandler","_value","inputElem","className","styles","editext","tabIndex","saveButtonDefaultClasses","hideIcons","saveButtonClass","saveButtonClassName","cancelButtonDefaultClasses","cancelButtonClass","cancelButtonClassName","editContainerClass","editContainerClassName","viewContainerClassName","buttonsAlign","onClick","saveButtonContent","cancelButtonContent","validationMessage","hint","editButtonClassName","showButtonsOnHover","editOnViewClick","renderValue","editButtonProps","editButtonContent","clsName","containerProps","mainContainerClassName","ContactSetUnit","ContactInfo","DeleteButton","StyledEdiText","EdiText","StyledEdiTextName","ContactListItem","id","nameValue","setNameValue","numberValue","setNumberValue","changeContactName","handleSaveName","trim","test","changeContactNumber","handleSaveNumber","deleteContact","onDeleteContact","ContactSet","ContactsError","ContactList","ContactsPage","fetchContacts","isContacts","Loader"],"sourceRoot":""}